import Head from 'next/head'
import { 
    Box, Button, Card, CardContent, 
    CircularProgress, Container, Grid, 
    Pagination, Stack, Typography 
} from '@mui/material'
import styles from '../styles/Home.module.css'
import AddIcon from '@mui/icons-material/Add';
import NorthIcon from '@mui/icons-material/North';
import SouthIcon from '@mui/icons-material/South';
import FormDialog from '@/components/FormDialog';
import { useEffect, useState } from 'react';
import axios from 'axios';

export async function getServerSideProps() {
    // Fetch data from an API endpoint
    const budgetRes = await axios.get('https://cuan.fly.dev/api/collections/budgets/records');
    const dataBudget = await budgetRes.data;
    const transactionRes = await axios.get('https://cuan.fly.dev/api/collections/transactionTemp/records');
    const dataTransaction = await transactionRes.data;
  
    // Pass data as props to the component
    return {
      props: {
        dataBudget,
        dataTransaction,
      },
    };
}

const CardComponent = ({total_balance,}) => {
  return (
    <Card className={styles.cardBalance}>
        <CardContent>
            <Typography variant="body2" children="Total Balance" />
            <Typography variant='h4' mt={1}>{total_balance}</Typography>
        </CardContent>
    </Card>
  )
}

const BudgetComponent = ({ icon, title, amount, spent}) => {
    const percentage = ((amount-spent)/Number(amount))*100

    return (
        <Box className={styles.budgets}>
            <Box sx={{ m: 1, mt: 2, position: 'relative' }}>
                <Box
                sx={{bgcolor: "transparent"}}>
                <Typography variant='h4'>{icon}</Typography>
                </Box>
                <CircularProgress
                size={60}
                    variant="determinate" value={percentage}
                    sx={{
                    position: 'absolute',
                    top: -10,
                    left: -7,
                    zIndex: 1,
                    }}
                />
            </Box>
            <Typography mt={1} variant='body2'>{title}</Typography>
            <Typography mt={1} sx={{fontSize: "10px"}} variant='body2'>{spent}</Typography>
            <Typography mt={1} sx={{fontSize: "12px"}} variant='body2'>/{amount}</Typography>
        </Box>
    )
}


const HistoryComponent= ({type, category, title, budget, date, fetch})=> {
    const filterCategory = fetch.filter(budget => budget.label===category)[0]?.icon || "?"
    return (
        <Grid 
            container 
            py="16px"
            alignItems="center"
            className={styles.historyCard}
        >
            <Grid item xs={3} textAlign="center">
                <Typography variant='h4'>{filterCategory}</Typography>
            </Grid>
            <Grid item xs={4}>
                <Typography>{title}</Typography>
                <Typography variant='body2'>{date}</Typography>
            </Grid>
            <Grid item xs={3}>
                <Typography variant='h6'>{budget}</Typography>
            </Grid>
            <Grid item xs={2} textAlign="center">
                <Typography>
                    {
                        type === 'Expense' ? 
                        <NorthIcon color='error' /> : 
                        <SouthIcon color='success' />
                    }
                </Typography>
            </Grid>
        </Grid>
    )
}

export default function Home({ dataBudget, dataTransaction }) {
    const [ open, setOpen ] = useState(false)
    const [spentBudget, setSpentBudget] = useState([])
    const [page, setPage] = useState(1)
    const [columnPerPage, setColumnPerPage] = useState(5)
    const [startColumn, setStartColumn] = useState(0)
    const totalPages = Math.ceil(dataTransaction.items?.length / 5)

    const handleClickOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);

    useEffect(() => {
        dataTransaction.items.map(trans => {
            if (trans.type === "Expense") setSpentBudget([
                ...spentBudget, 
                { category: trans.category, amount: trans.amount }
            ])
        })
    }, [])

    const handleChangePage = (event, value) => {
        if(page < value) {
            setColumnPerPage(columnPerPage + 5)
            setStartColumn(startColumn + 5)
        } else if(page > value) {
            setColumnPerPage(columnPerPage - 5)
            setStartColumn(startColumn - 5)
        }
        setPage(value)
    }

    return (
        <>
            <Head>
                <title>Home | Cuan</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Container sx={{mb: 10}}>
                <Box>
                    <Typography variant='body2' children="Good Morning," />
                    <Typography variant='h6' children="Khairunnisa" />
                </Box>
                <CardComponent total_balance={"Coming Soon"} />
                <Box py={2} sx={{overflowX: "scroll"}}>
                    <Typography variant='h6' children="Budgets" />
                    <Stack mt={2} direction="row" spacing={2}>
                        {
                            dataBudget.items.map(budget => (
                                <BudgetComponent 
                                    icon={budget.icon} 
                                    title={budget.label} 
                                    amount={budget.amount} 
                                    spent={budget.spent}
                                    key={budget.id} 
                                    transaction={dataTransaction}
                                />
                            ))
                        }
                        <Box>
                            <Button onClick={handleClickOpen} className={styles.newBudgetBtn}>
                                <Typography variant='h4'><AddIcon /></Typography>
                                <Typography variant="body2" mt={1} textAlign='center' width="9ch">Add new Budget</Typography>
                            </Button>
                        </Box>
                        <FormDialog open={open} onClose={handleClose} />
                    </Stack>
                </Box>
                <Box py={2}>
                    <Typography variant='h6' children="History" />
                    {
                        dataTransaction.items.slice(startColumn, columnPerPage).map(trans => (
                            <HistoryComponent  
                                fetch={dataBudget.items}
                                category={trans.category} 
                                type={trans.type} 
                                title={trans.title}
                                date="24-2-2023"
                                budget={trans.amount}
                                key={trans.id}
                            />
                        ))
                    }
                    <Pagination 
                        count={totalPages} page={page} 
                        onChange={handleChangePage} 
                        sx={{"& .MuiPaginationItem-root": {
                            color: "#fff"
                        }}}
                        variant="outlined" shape="rounded"
                    />
                </Box>
            </Container>
        </>
    )
}
